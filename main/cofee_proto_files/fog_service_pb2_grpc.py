# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import cloud_service_pb2 as cloud__service__pb2
import fog_service_pb2 as fog__service__pb2


class fogStub(object):
  """SERVICES FOR THE ABOVE
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register_edge = channel.unary_unary(
        '/fog/register_edge',
        request_serializer=fog__service__pb2.edge_metadata.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.new_microbatch = channel.unary_unary(
        '/fog/new_microbatch',
        request_serializer=fog__service__pb2.new_microbatch_metadata.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.register_cep = channel.unary_unary(
        '/fog/register_cep',
        request_serializer=cloud__service__pb2.task_and_open_filter_details.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.inquire_cost_for_task = channel.unary_unary(
        '/fog/inquire_cost_for_task',
        request_serializer=cloud__service__pb2.task_and_open_filter_details.SerializeToString,
        response_deserializer=fog__service__pb2.matched_microbatch_list.FromString,
        )
    self.check_local_index = channel.unary_unary(
        '/fog/check_local_index',
        request_serializer=cloud__service__pb2.task_and_open_filter_details.SerializeToString,
        response_deserializer=fog__service__pb2.matched_microbatch_list.FromString,
        )
    self.acknowledge_task = channel.unary_unary(
        '/fog/acknowledge_task',
        request_serializer=cloud__service__pb2.task_details.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.reject_task = channel.unary_unary(
        '/fog/reject_task',
        request_serializer=cloud__service__pb2.task_details.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.request_bid_for_task = channel.unary_unary(
        '/fog/request_bid_for_task',
        request_serializer=cloud__service__pb2.task_details.SerializeToString,
        response_deserializer=cloud__service__pb2.bid_metadata.FromString,
        )
    self.termination_notice = channel.unary_unary(
        '/fog/termination_notice',
        request_serializer=fog__service__pb2.term_notice_gamma.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )


class fogServicer(object):
  """SERVICES FOR THE ABOVE
  """

  def register_edge(self, request, context):
    """register edge from edge device
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def new_microbatch(self, request, context):
    """new microbatch from edge/fog
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def register_cep(self, request, context):
    """register CEP for open filter and recheck delta index in Fog
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def inquire_cost_for_task(self, request, context):
    """rpc recheck_delta(task_and_open_filter_details) returns (matched_microbatch_list);
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def check_local_index(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def acknowledge_task(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def reject_task(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def request_bid_for_task(self, request, context):
    """MOVED TO ALTERNATE_FOG_CHECK
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def termination_notice(self, request, context):
    """alternate fog check API
    rpc alternate_fog_check(task, sub_deadline, microbatch, fog_ip_containing_microatch, c, size(microbatch)) returns (dag_id, microbatch_id, task_id,:true, kappa)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_fogServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register_edge': grpc.unary_unary_rpc_method_handler(
          servicer.register_edge,
          request_deserializer=fog__service__pb2.edge_metadata.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'new_microbatch': grpc.unary_unary_rpc_method_handler(
          servicer.new_microbatch,
          request_deserializer=fog__service__pb2.new_microbatch_metadata.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'register_cep': grpc.unary_unary_rpc_method_handler(
          servicer.register_cep,
          request_deserializer=cloud__service__pb2.task_and_open_filter_details.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'inquire_cost_for_task': grpc.unary_unary_rpc_method_handler(
          servicer.inquire_cost_for_task,
          request_deserializer=cloud__service__pb2.task_and_open_filter_details.FromString,
          response_serializer=fog__service__pb2.matched_microbatch_list.SerializeToString,
      ),
      'check_local_index': grpc.unary_unary_rpc_method_handler(
          servicer.check_local_index,
          request_deserializer=cloud__service__pb2.task_and_open_filter_details.FromString,
          response_serializer=fog__service__pb2.matched_microbatch_list.SerializeToString,
      ),
      'acknowledge_task': grpc.unary_unary_rpc_method_handler(
          servicer.acknowledge_task,
          request_deserializer=cloud__service__pb2.task_details.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'reject_task': grpc.unary_unary_rpc_method_handler(
          servicer.reject_task,
          request_deserializer=cloud__service__pb2.task_details.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'request_bid_for_task': grpc.unary_unary_rpc_method_handler(
          servicer.request_bid_for_task,
          request_deserializer=cloud__service__pb2.task_details.FromString,
          response_serializer=cloud__service__pb2.bid_metadata.SerializeToString,
      ),
      'termination_notice': grpc.unary_unary_rpc_method_handler(
          servicer.termination_notice,
          request_deserializer=fog__service__pb2.term_notice_gamma.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fog', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
