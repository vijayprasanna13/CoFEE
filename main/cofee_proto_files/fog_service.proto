syntax = "proto3";
//package home.prasanth.Desktop.CoFEE.src.main.cofee_proto_files.fog;

import "cloud_service.proto";


// EDGE REGISTRATION Messages
message edge_metadata {
    int32 ip = 1;
    int32 number_of_cores = 2;
}

// NEW MICROBATCH GENERATION MESSAGES


message microbatch_metadata {
    int32 id = 1;
    int32 sensorid = 2;
    float lat = 3;
    float long = 4;
    int32 startTime = 5;
    int32 endTime = 6;
    map<string,string> prop = 7;
}



message new_microbatch_metadata {
     microbatch_metadata mubatch_metadata = 1;
     int32 edge_ip =2;
}

message matched_microbatch {
    map<int32, int32> m  = 1;       // mu1: A(True)
    int32 lambda = 2;       // lambda(mu1, A)
    // matched microbatch
    // task id
    // appending all kappa values
    // c (replication time between fog and edge)
    // size(microbatch)
}

message matched_microbatch_list {
    repeated matched_microbatch multiple_matched_microbatch= 1;
}

// termination notice from Edge
message term_notice_gamma {
    int32 gamma = 1;
}

// SERVICES FOR THE ABOVE
service fog {
    // register edge from edge device
    rpc register_edge(edge_metadata) returns (Empty);

    // new microbatch from edge/fog
    rpc new_microbatch(new_microbatch_metadata) returns (Empty);

    // register CEP for open filter and recheck delta index in Fog
    rpc register_cep(task_and_open_filter_details) returns (Empty);

    rpc inquire_cost_for_task(task_and_open_filter_details) returns (matched_microbatch_list);
    // rpc recheck_delta(task_and_open_filter_details) returns (matched_microbatch_list);

    rpc check_local_index(task_and_open_filter_details) returns (matched_microbatch_list);
    rpc acknowledge_task(task_details) returns (Empty);
    rpc reject_task(task_details) returns (Empty);

    rpc request_bid_for_task(task_details) returns (bid_metadata);      // MOVED TO ALTERNATE_FOG_CHECK

    rpc termination_notice(term_notice_gamma) returns (Empty);
    // alternate fog check API
    // rpc alternate_fog_check(task, sub_deadline, microbatch, fog_ip_containing_microatch, c, size(microbatch)) returns (dag_id, microbatch_id, task_id,:true, kappa)

    // rpc task_completed() returns (Empty)
}






