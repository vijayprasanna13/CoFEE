# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fog_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import cloud_service_pb2 as cloud__service__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='fog_service.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x11\x66og_service.proto\x1a\x13\x63loud_service.proto\"4\n\redge_metadata\x12\n\n\x02ip\x18\x01 \x01(\x05\x12\x17\n\x0fnumber_of_cores\x18\x02 \x01(\x05\"\xcd\x01\n\x13microbatch_metadata\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x10\n\x08sensorid\x18\x02 \x01(\x05\x12\x0b\n\x03lat\x18\x03 \x01(\x02\x12\x0c\n\x04long\x18\x04 \x01(\x02\x12\x11\n\tstartTime\x18\x05 \x01(\x05\x12\x0f\n\x07\x65ndTime\x18\x06 \x01(\x05\x12,\n\x04prop\x18\x07 \x03(\x0b\x32\x1e.microbatch_metadata.PropEntry\x1a+\n\tPropEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"Z\n\x17new_microbatch_metadata\x12.\n\x10mubatch_metadata\x18\x01 \x01(\x0b\x32\x14.microbatch_metadata\x12\x0f\n\x07\x65\x64ge_ip\x18\x02 \x01(\x05\"u\n\x12matched_microbatch\x12%\n\x01m\x18\x01 \x03(\x0b\x32\x1a.matched_microbatch.MEntry\x12\x0e\n\x06lambda\x18\x02 \x01(\x05\x1a(\n\x06MEntry\x12\x0b\n\x03key\x18\x01 \x01(\x05\x12\r\n\x05value\x18\x02 \x01(\x05:\x02\x38\x01\"S\n\x17matched_microbatch_list\x12\x38\n\x1bmultiple_matched_microbatch\x18\x01 \x03(\x0b\x32\x13.matched_microbatch\"\"\n\x11term_notice_gamma\x12\r\n\x05gamma\x18\x01 \x01(\x05\x32\xea\x03\n\x03\x66og\x12\'\n\rregister_edge\x12\x0e.edge_metadata\x1a\x06.Empty\x12\x32\n\x0enew_microbatch\x12\x18.new_microbatch_metadata\x1a\x06.Empty\x12\x35\n\x0cregister_cep\x12\x1d.task_and_open_filter_details\x1a\x06.Empty\x12H\n\rrecheck_delta\x12\x1d.task_and_open_filter_details\x1a\x18.matched_microbatch_list\x12L\n\x11\x63heck_local_index\x12\x1d.task_and_open_filter_details\x1a\x18.matched_microbatch_list\x12)\n\x10\x61\x63knowledge_task\x12\r.task_details\x1a\x06.Empty\x12$\n\x0breject_task\x12\r.task_details\x1a\x06.Empty\x12\x34\n\x14request_bid_for_task\x12\r.task_details\x1a\r.bid_metadata\x12\x30\n\x12termination_notice\x12\x12.term_notice_gamma\x1a\x06.Emptyb\x06proto3')
  ,
  dependencies=[cloud__service__pb2.DESCRIPTOR,])




_EDGE_METADATA = _descriptor.Descriptor(
  name='edge_metadata',
  full_name='edge_metadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='edge_metadata.ip', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='number_of_cores', full_name='edge_metadata.number_of_cores', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=42,
  serialized_end=94,
)


_MICROBATCH_METADATA_PROPENTRY = _descriptor.Descriptor(
  name='PropEntry',
  full_name='microbatch_metadata.PropEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='microbatch_metadata.PropEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='microbatch_metadata.PropEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=259,
  serialized_end=302,
)

_MICROBATCH_METADATA = _descriptor.Descriptor(
  name='microbatch_metadata',
  full_name='microbatch_metadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='microbatch_metadata.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='sensorid', full_name='microbatch_metadata.sensorid', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='lat', full_name='microbatch_metadata.lat', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='long', full_name='microbatch_metadata.long', index=3,
      number=4, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='startTime', full_name='microbatch_metadata.startTime', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='endTime', full_name='microbatch_metadata.endTime', index=5,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='prop', full_name='microbatch_metadata.prop', index=6,
      number=7, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_MICROBATCH_METADATA_PROPENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=97,
  serialized_end=302,
)


_NEW_MICROBATCH_METADATA = _descriptor.Descriptor(
  name='new_microbatch_metadata',
  full_name='new_microbatch_metadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mubatch_metadata', full_name='new_microbatch_metadata.mubatch_metadata', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='edge_ip', full_name='new_microbatch_metadata.edge_ip', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=304,
  serialized_end=394,
)


_MATCHED_MICROBATCH_MENTRY = _descriptor.Descriptor(
  name='MEntry',
  full_name='matched_microbatch.MEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='matched_microbatch.MEntry.key', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='value', full_name='matched_microbatch.MEntry.value', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=473,
  serialized_end=513,
)

_MATCHED_MICROBATCH = _descriptor.Descriptor(
  name='matched_microbatch',
  full_name='matched_microbatch',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='m', full_name='matched_microbatch.m', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='lambda', full_name='matched_microbatch.lambda', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_MATCHED_MICROBATCH_MENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=396,
  serialized_end=513,
)


_MATCHED_MICROBATCH_LIST = _descriptor.Descriptor(
  name='matched_microbatch_list',
  full_name='matched_microbatch_list',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='multiple_matched_microbatch', full_name='matched_microbatch_list.multiple_matched_microbatch', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=515,
  serialized_end=598,
)


_TERM_NOTICE_GAMMA = _descriptor.Descriptor(
  name='term_notice_gamma',
  full_name='term_notice_gamma',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='gamma', full_name='term_notice_gamma.gamma', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=600,
  serialized_end=634,
)

_MICROBATCH_METADATA_PROPENTRY.containing_type = _MICROBATCH_METADATA
_MICROBATCH_METADATA.fields_by_name['prop'].message_type = _MICROBATCH_METADATA_PROPENTRY
_NEW_MICROBATCH_METADATA.fields_by_name['mubatch_metadata'].message_type = _MICROBATCH_METADATA
_MATCHED_MICROBATCH_MENTRY.containing_type = _MATCHED_MICROBATCH
_MATCHED_MICROBATCH.fields_by_name['m'].message_type = _MATCHED_MICROBATCH_MENTRY
_MATCHED_MICROBATCH_LIST.fields_by_name['multiple_matched_microbatch'].message_type = _MATCHED_MICROBATCH
DESCRIPTOR.message_types_by_name['edge_metadata'] = _EDGE_METADATA
DESCRIPTOR.message_types_by_name['microbatch_metadata'] = _MICROBATCH_METADATA
DESCRIPTOR.message_types_by_name['new_microbatch_metadata'] = _NEW_MICROBATCH_METADATA
DESCRIPTOR.message_types_by_name['matched_microbatch'] = _MATCHED_MICROBATCH
DESCRIPTOR.message_types_by_name['matched_microbatch_list'] = _MATCHED_MICROBATCH_LIST
DESCRIPTOR.message_types_by_name['term_notice_gamma'] = _TERM_NOTICE_GAMMA
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

edge_metadata = _reflection.GeneratedProtocolMessageType('edge_metadata', (_message.Message,), dict(
  DESCRIPTOR = _EDGE_METADATA,
  __module__ = 'fog_service_pb2'
  # @@protoc_insertion_point(class_scope:edge_metadata)
  ))
_sym_db.RegisterMessage(edge_metadata)

microbatch_metadata = _reflection.GeneratedProtocolMessageType('microbatch_metadata', (_message.Message,), dict(

  PropEntry = _reflection.GeneratedProtocolMessageType('PropEntry', (_message.Message,), dict(
    DESCRIPTOR = _MICROBATCH_METADATA_PROPENTRY,
    __module__ = 'fog_service_pb2'
    # @@protoc_insertion_point(class_scope:microbatch_metadata.PropEntry)
    ))
  ,
  DESCRIPTOR = _MICROBATCH_METADATA,
  __module__ = 'fog_service_pb2'
  # @@protoc_insertion_point(class_scope:microbatch_metadata)
  ))
_sym_db.RegisterMessage(microbatch_metadata)
_sym_db.RegisterMessage(microbatch_metadata.PropEntry)

new_microbatch_metadata = _reflection.GeneratedProtocolMessageType('new_microbatch_metadata', (_message.Message,), dict(
  DESCRIPTOR = _NEW_MICROBATCH_METADATA,
  __module__ = 'fog_service_pb2'
  # @@protoc_insertion_point(class_scope:new_microbatch_metadata)
  ))
_sym_db.RegisterMessage(new_microbatch_metadata)

matched_microbatch = _reflection.GeneratedProtocolMessageType('matched_microbatch', (_message.Message,), dict(

  MEntry = _reflection.GeneratedProtocolMessageType('MEntry', (_message.Message,), dict(
    DESCRIPTOR = _MATCHED_MICROBATCH_MENTRY,
    __module__ = 'fog_service_pb2'
    # @@protoc_insertion_point(class_scope:matched_microbatch.MEntry)
    ))
  ,
  DESCRIPTOR = _MATCHED_MICROBATCH,
  __module__ = 'fog_service_pb2'
  # @@protoc_insertion_point(class_scope:matched_microbatch)
  ))
_sym_db.RegisterMessage(matched_microbatch)
_sym_db.RegisterMessage(matched_microbatch.MEntry)

matched_microbatch_list = _reflection.GeneratedProtocolMessageType('matched_microbatch_list', (_message.Message,), dict(
  DESCRIPTOR = _MATCHED_MICROBATCH_LIST,
  __module__ = 'fog_service_pb2'
  # @@protoc_insertion_point(class_scope:matched_microbatch_list)
  ))
_sym_db.RegisterMessage(matched_microbatch_list)

term_notice_gamma = _reflection.GeneratedProtocolMessageType('term_notice_gamma', (_message.Message,), dict(
  DESCRIPTOR = _TERM_NOTICE_GAMMA,
  __module__ = 'fog_service_pb2'
  # @@protoc_insertion_point(class_scope:term_notice_gamma)
  ))
_sym_db.RegisterMessage(term_notice_gamma)


_MICROBATCH_METADATA_PROPENTRY.has_options = True
_MICROBATCH_METADATA_PROPENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_MATCHED_MICROBATCH_MENTRY.has_options = True
_MATCHED_MICROBATCH_MENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))

_FOG = _descriptor.ServiceDescriptor(
  name='fog',
  full_name='fog',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=637,
  serialized_end=1127,
  methods=[
  _descriptor.MethodDescriptor(
    name='register_edge',
    full_name='fog.register_edge',
    index=0,
    containing_service=None,
    input_type=_EDGE_METADATA,
    output_type=cloud__service__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='new_microbatch',
    full_name='fog.new_microbatch',
    index=1,
    containing_service=None,
    input_type=_NEW_MICROBATCH_METADATA,
    output_type=cloud__service__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='register_cep',
    full_name='fog.register_cep',
    index=2,
    containing_service=None,
    input_type=cloud__service__pb2._TASK_AND_OPEN_FILTER_DETAILS,
    output_type=cloud__service__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='recheck_delta',
    full_name='fog.recheck_delta',
    index=3,
    containing_service=None,
    input_type=cloud__service__pb2._TASK_AND_OPEN_FILTER_DETAILS,
    output_type=_MATCHED_MICROBATCH_LIST,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='check_local_index',
    full_name='fog.check_local_index',
    index=4,
    containing_service=None,
    input_type=cloud__service__pb2._TASK_AND_OPEN_FILTER_DETAILS,
    output_type=_MATCHED_MICROBATCH_LIST,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='acknowledge_task',
    full_name='fog.acknowledge_task',
    index=5,
    containing_service=None,
    input_type=cloud__service__pb2._TASK_DETAILS,
    output_type=cloud__service__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='reject_task',
    full_name='fog.reject_task',
    index=6,
    containing_service=None,
    input_type=cloud__service__pb2._TASK_DETAILS,
    output_type=cloud__service__pb2._EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='request_bid_for_task',
    full_name='fog.request_bid_for_task',
    index=7,
    containing_service=None,
    input_type=cloud__service__pb2._TASK_DETAILS,
    output_type=cloud__service__pb2._BID_METADATA,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='termination_notice',
    full_name='fog.termination_notice',
    index=8,
    containing_service=None,
    input_type=_TERM_NOTICE_GAMMA,
    output_type=cloud__service__pb2._EMPTY,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_FOG)

DESCRIPTOR.services_by_name['fog'] = _FOG

# @@protoc_insertion_point(module_scope)
