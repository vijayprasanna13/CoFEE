# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: edge_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='edge_service.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x12\x65\x64ge_service.proto\"%\n\x12microbatch_payload\x12\x0f\n\x07payload\x18\x01 \x03(\x0c\"\"\n\rmicrobatch_id\x12\x11\n\tmubatchid\x18\x01 \x01(\x05\"\x07\n\x05\x45mpty\"3\n\x0ctask_details\x12\x0f\n\x07task_id\x18\x01 \x01(\t\x12\x12\n\nslack_time\x18\x02 \x01(\x05\"G\n\ttask_info\x12\x1b\n\x04task\x18\x01 \x01(\x0b\x32\r.task_details\x12\x1d\n\x05input\x18\x02 \x01(\x0b\x32\x0e.microbatch_id\"\x18\n\x06result\x12\x0e\n\x06status\x18\x01 \x01(\x05\x32\x84\x01\n\x04\x65\x64ge\x12\x36\n\x0fpull_microbatch\x12\x0e.microbatch_id\x1a\x13.microbatch_payload\x12\"\n\tkill_task\x12\r.task_details\x1a\x06.Empty\x12 \n\tsend_task\x12\n.task_info\x1a\x07.resultb\x06proto3')
)




_MICROBATCH_PAYLOAD = _descriptor.Descriptor(
  name='microbatch_payload',
  full_name='microbatch_payload',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='payload', full_name='microbatch_payload.payload', index=0,
      number=1, type=12, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=59,
)


_MICROBATCH_ID = _descriptor.Descriptor(
  name='microbatch_id',
  full_name='microbatch_id',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mubatchid', full_name='microbatch_id.mubatchid', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=61,
  serialized_end=95,
)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=97,
  serialized_end=104,
)


_TASK_DETAILS = _descriptor.Descriptor(
  name='task_details',
  full_name='task_details',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task_id', full_name='task_details.task_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='slack_time', full_name='task_details.slack_time', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=106,
  serialized_end=157,
)


_TASK_INFO = _descriptor.Descriptor(
  name='task_info',
  full_name='task_info',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='task', full_name='task_info.task', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='input', full_name='task_info.input', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=159,
  serialized_end=230,
)


_RESULT = _descriptor.Descriptor(
  name='result',
  full_name='result',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='result.status', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=232,
  serialized_end=256,
)

_TASK_INFO.fields_by_name['task'].message_type = _TASK_DETAILS
_TASK_INFO.fields_by_name['input'].message_type = _MICROBATCH_ID
DESCRIPTOR.message_types_by_name['microbatch_payload'] = _MICROBATCH_PAYLOAD
DESCRIPTOR.message_types_by_name['microbatch_id'] = _MICROBATCH_ID
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['task_details'] = _TASK_DETAILS
DESCRIPTOR.message_types_by_name['task_info'] = _TASK_INFO
DESCRIPTOR.message_types_by_name['result'] = _RESULT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

microbatch_payload = _reflection.GeneratedProtocolMessageType('microbatch_payload', (_message.Message,), dict(
  DESCRIPTOR = _MICROBATCH_PAYLOAD,
  __module__ = 'edge_service_pb2'
  # @@protoc_insertion_point(class_scope:microbatch_payload)
  ))
_sym_db.RegisterMessage(microbatch_payload)

microbatch_id = _reflection.GeneratedProtocolMessageType('microbatch_id', (_message.Message,), dict(
  DESCRIPTOR = _MICROBATCH_ID,
  __module__ = 'edge_service_pb2'
  # @@protoc_insertion_point(class_scope:microbatch_id)
  ))
_sym_db.RegisterMessage(microbatch_id)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'edge_service_pb2'
  # @@protoc_insertion_point(class_scope:Empty)
  ))
_sym_db.RegisterMessage(Empty)

task_details = _reflection.GeneratedProtocolMessageType('task_details', (_message.Message,), dict(
  DESCRIPTOR = _TASK_DETAILS,
  __module__ = 'edge_service_pb2'
  # @@protoc_insertion_point(class_scope:task_details)
  ))
_sym_db.RegisterMessage(task_details)

task_info = _reflection.GeneratedProtocolMessageType('task_info', (_message.Message,), dict(
  DESCRIPTOR = _TASK_INFO,
  __module__ = 'edge_service_pb2'
  # @@protoc_insertion_point(class_scope:task_info)
  ))
_sym_db.RegisterMessage(task_info)

result = _reflection.GeneratedProtocolMessageType('result', (_message.Message,), dict(
  DESCRIPTOR = _RESULT,
  __module__ = 'edge_service_pb2'
  # @@protoc_insertion_point(class_scope:result)
  ))
_sym_db.RegisterMessage(result)



_EDGE = _descriptor.ServiceDescriptor(
  name='edge',
  full_name='edge',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=259,
  serialized_end=391,
  methods=[
  _descriptor.MethodDescriptor(
    name='pull_microbatch',
    full_name='edge.pull_microbatch',
    index=0,
    containing_service=None,
    input_type=_MICROBATCH_ID,
    output_type=_MICROBATCH_PAYLOAD,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='kill_task',
    full_name='edge.kill_task',
    index=1,
    containing_service=None,
    input_type=_TASK_DETAILS,
    output_type=_EMPTY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='send_task',
    full_name='edge.send_task',
    index=2,
    containing_service=None,
    input_type=_TASK_INFO,
    output_type=_RESULT,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_EDGE)

DESCRIPTOR.services_by_name['edge'] = _EDGE

# @@protoc_insertion_point(module_scope)
