'''
INDEXING SERVICE WHICH HANDLES FUNCTIONS LIKE :-
1) UPDATE DELTA INDEX WITH GENERATED MICRO-BATCHES FROM SENSORS
2) PERIODIC UPDATE OF LOCAL INDEX FROM DELTA INDEX
'''

import time
import sys, os
import pickle
sys.path.append('/home/prasanth/Desktop/CoFEE/src/main/cofee_fog_service/fog_index_manager/local_index/')
sys.path.append('/home/prasanth/Desktop/CoFEE/src/main/cofee_fog_service/fog_index_manager/delta_index/')


MICROBATCH_GENERATED_PATH = "/home/prasanth/Desktop/CoFEE/src/main/cofee_edge_service/edge_user_data/stored_microbatches/"

import delta_index
import local_index

generated_microbatch_file_list = []


# poll MICROBATCH GENERATED PATH for microbatches generated by sensors
def populate_file_list_of_microbatches():
    for file in os.listdir(MICROBATCH_GENERATED_PATH):
        if file.endswith('.pkl'):
            generated_microbatch_file_list.append(file)

# deserialize microbatches generated and stored by sensor onto directory
def deserialize_and_add_all_microbatches_to_delta_index():
    for f in generated_microbatch_file_list:
        fileObject = open(MICROBATCH_GENERATED_PATH+str(f), 'rb')
        microbatch_object = pickle.load(fileObject, errors='ignore')
        #print(microbatch_object.get_microbatch_prop())
        delta_index.add_microbatch(microbatch_object.get_micro_batch_id(), microbatch_object.get_spatial_region(),
                   microbatch_object.get_timestamp(), microbatch_object.get_microbatch_prop(), microbatch_object)

def update_delta_index():
    populate_file_list_of_microbatches()
    deserialize_and_add_all_microbatches_to_delta_index()
    delta_index.print_delta_index()


def periodic_update_local():
    update_delta_index()
    print(delta_index.spatial_delta_index)

    microbatch_id_list = []
    for id in delta_index.spatial_delta_index:
        microbatch_id_list.append(id)

    print("LIST OF MICROBATCHES :- ")
    print(microbatch_id_list)

    for id in microbatch_id_list:
        local_index.add_microbatch(id, delta_index.spatial_delta_index[id][0], delta_index.temporal_delta_index[id][0],
                                   delta_index.property_delta_index[id][0], delta_index.spatial_delta_index[id][1])

    print("DONE UPDATING LOCAL INDEX WITH DELTA INDEX!!")

'''
Uncomment to update periodically
while(True):
    periodic_update()
    time.sleep(3)       process sleeps for 3 seconds
'''

periodic_update_local()