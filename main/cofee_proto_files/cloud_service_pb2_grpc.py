# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import cloud_service_pb2 as cloud__service__pb2


class cloudStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register_fog = channel.unary_unary(
        '/cloud/register_fog',
        request_serializer=cloud__service__pb2.fog_metadata.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.request_fog_list = channel.unary_unary(
        '/cloud/request_fog_list',
        request_serializer=cloud__service__pb2.fog_labels.SerializeToString,
        response_deserializer=cloud__service__pb2.fog_metadata.FromString,
        )
    self.update_global_index = channel.unary_unary(
        '/cloud/update_global_index',
        request_serializer=cloud__service__pb2.local_index_input.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.dag_input = channel.unary_unary(
        '/cloud/dag_input',
        request_serializer=cloud__service__pb2.dag_filter_deadline_input.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.heap_update = channel.unary_unary(
        '/cloud/heap_update',
        request_serializer=cloud__service__pb2.fog_sequence_free_slot_list.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.task_done = channel.unary_unary(
        '/cloud/task_done',
        request_serializer=cloud__service__pb2.task_details.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.task_undone = channel.unary_unary(
        '/cloud/task_undone',
        request_serializer=cloud__service__pb2.task_details.SerializeToString,
        response_deserializer=cloud__service__pb2.Empty.FromString,
        )
    self.bid_for_task_on_new_microbatch = channel.unary_unary(
        '/cloud/bid_for_task_on_new_microbatch',
        request_serializer=cloud__service__pb2.bid_metadata.SerializeToString,
        response_deserializer=cloud__service__pb2.result.FromString,
        )


class cloudServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def register_fog(self, request, context):
    """fog onboarding API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def request_fog_list(self, request, context):
    """edge onboarding API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def update_global_index(self, request, context):
    """global index update
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def dag_input(self, request, context):
    """register DAG input
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def heap_update(self, request, context):
    """Heap updates to Cloud
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def task_done(self, request, context):
    """Task done
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def task_undone(self, request, context):
    """Tasks undone
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def bid_for_task_on_new_microbatch(self, request, context):
    """Bid for task on new microbatch
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_cloudServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register_fog': grpc.unary_unary_rpc_method_handler(
          servicer.register_fog,
          request_deserializer=cloud__service__pb2.fog_metadata.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'request_fog_list': grpc.unary_unary_rpc_method_handler(
          servicer.request_fog_list,
          request_deserializer=cloud__service__pb2.fog_labels.FromString,
          response_serializer=cloud__service__pb2.fog_metadata.SerializeToString,
      ),
      'update_global_index': grpc.unary_unary_rpc_method_handler(
          servicer.update_global_index,
          request_deserializer=cloud__service__pb2.local_index_input.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'dag_input': grpc.unary_unary_rpc_method_handler(
          servicer.dag_input,
          request_deserializer=cloud__service__pb2.dag_filter_deadline_input.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'heap_update': grpc.unary_unary_rpc_method_handler(
          servicer.heap_update,
          request_deserializer=cloud__service__pb2.fog_sequence_free_slot_list.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'task_done': grpc.unary_unary_rpc_method_handler(
          servicer.task_done,
          request_deserializer=cloud__service__pb2.task_details.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'task_undone': grpc.unary_unary_rpc_method_handler(
          servicer.task_undone,
          request_deserializer=cloud__service__pb2.task_details.FromString,
          response_serializer=cloud__service__pb2.Empty.SerializeToString,
      ),
      'bid_for_task_on_new_microbatch': grpc.unary_unary_rpc_method_handler(
          servicer.bid_for_task_on_new_microbatch,
          request_deserializer=cloud__service__pb2.bid_metadata.FromString,
          response_serializer=cloud__service__pb2.result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cloud', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
